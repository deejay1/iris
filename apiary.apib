FORMAT: 1A

# iris
IRIS API Notes - manage communication during the failure

# Group Service Data
Proxy endpoint to be used by plugins to update collection of available services, 
and their communication list.

## ServiceData [/service_data/]
The service model has the following attributes:
- service_id
- name
- flow_name
- flow_value
- communications - list of emails

+ Model
    
    Service
    
    + Body 
    
            {
                "service_id": 1,
                "name": "Foo service",
                "flow_name": "Automatic flow",
                "flow_value": 1,
                "communications": [
                    "foo@example.com",
                    "bar@example.com",
                    "baz@example.com"
                ]
            }
    
    + Schema
    
            {
                "type: "object",
                "title": "Service",
                "properties": {
                    "service_id": {
                        "type": "integer",
                        "required": true,
                        "description": "Service primary key"
                    },
                    "name": {
                        "type": "string",
                        "required": true,
                        "description": "Service name"
                    },
                    "flow_name": {
                        "type": "string",
                        "required": true,
                        "description": "Communication flow name"
                    },
                    "flow_value": {
                        "type": "integer",
                        "required": true,
                        "description": "Communication flow value"
                    },
                    "communications": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "validation": "EmailValidator"
                        }
                        "required": true,
                        "description": "List of emails"
                    },
                }
            }

### Create or Update service [POST]
It update or if service doesn"t exists, create new service.

+ Request (application/json)
        
        {
            "service_id": 1,
            "name": "Foo service",
            "flow_name": "Automatic flow",
            "flow_value": 1,
            "communications": [
                "foo@example.com",
                "bar@example.com",
                "baz@example.com"
            ]
        }

+ Response 201

# Group Communication

Handles communication related actions

## Communication [/communication/{service_id}]

+ Parameters
    + service_id (int) ... ID of the service.

+ Model (application/json)
    + Body

            {
                "service_id": 123,
                "date": "2015-01-30T13:01:01Z",
                "environment": "prod",
                "status": "trigger",
                "metric": "failingmetric"
            }


### Start new communication [POST]

1. if there's no active communication:
 * start a new communication

2. if  there's an active communication
 * return error that a PUT method should be used

+ Request

    [Communication][]

+ Response 201 (application/json)
    + Body
    
            {
                "detail": "OK",
                "id": 123
            }

+ Response 409 (application/json)
   + Body
   
            {
                "detail": "Communication for service {service_id} is already open. Use PUT to update communication",
                "id": 123
            }

### Update current communication [PUT]
1. When there is a communication open, update the communication
2. When there's no communication, return an error that a POST call should be used

+ Request
    
    [Communication][]

+ Response 200 (application/json)
    + Body

            {
                "detail": "OK",
                "id": 123
            }

+ Response 405 (application/json)
   + Body
   
            {
                "detail": "Communication for service {service_id} isn't opened. Use POST to create a new communication",
                "id": 123
            }

## Comment [/communication/{service_id}/comment]

New user comment to the communication.

+ Parameters
    + service_id (int) ... ID of the service.

+ Model (application/json)
    + Body
    
            {
                "message": "I am a new user comment to the Communication"
            }

### Add a Comment [POST]

+ Request

    [Comment][]
        
+ Response 201 (application/json)
    + Body

            {
                "detail": "OK",
                "id": 123
            }

### Retrieve a list of comments [GET]
+ Response 200 (application/json)
    + Body
            
            [{
                "date": "2015-01-30T13:05:06Z",
                "message": "My comment message",
                "author": "Jan Kowalski"
            },
            {
                "date": "2015-01-30T13:05:06Z",
                "message": "Another comment",
                "author": "John Doe"
            }]