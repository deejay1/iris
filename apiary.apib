FORMAT: 1A

# iris
IRIS API Notes - manage communication during the failure


## ServiceData [/service_data/{service_id}]
+ Parameters
    + service_id (int) ... ID of the service.

### Retrieve information about specific service from Service Catalogue [GET]
+ Response 200 (application/json)
    + Body
        
            {
                "owners": {
                    "technical": [{"name": "Jan Kowalski", "email": "jan.kowalski@domain.pl"}],
                    "business": [{"name": "Tomasz Czarnecki", "email": "tc@domain.pl"}]
                },
                "jira": {
                    "queue": "MYQUEUE"
                }
            }

# Group Communication

Handles communication related actions

## Communication [/communication/{service_id}]

+ Parameters
    + service_id (int) ... ID of the service.

+ Model (application/json)
    + Body

            {
                "service_id": 123,
                "date": "2015-01-30T13:01:01Z",
                "environment": "prod",
                "status": "trigger",
                "metric": "failingmetric"
            }


### Start new communication [POST]

1. if there's no active communication:
 * start a new communication

2. if  there's an active communication
 * return error that a PUT method should be used

+ Request

    [Communication][]

+ Response 201 (application/json)
    + Body
    
            {
                "detail": "OK",
                "id": 123
            }

+ Response 409 (application/json)
   + Body
   
            {
                "detail": "Communication for service {service_id} is already open. Use PUT to update communication",
                "id": 123
            }

### Update current communication [PUT]
1. When there is a communication open, update the communication
2. When there's no communication, return an error that a POST call should be used

+ Request
    
    [Communication][]

+ Response 200 (application/json)
    + Body

            {
                "detail": "OK",
                "id": 123
            }

+ Response 405 (application/json)
   + Body
   
            {
                "detail": "Communication for service {service_id} isn't opened. Use POST to create a new communication",
                "id": 123
            }

## Comment [/communication/{service_id}/comment]

New user comment to the communication.

+ Parameters
    + service_id (int) ... ID of the service.

### Add a Comment [POST]
+ Response 201 (application/json)
    + Body

            {
                "detail": "OK",
                "id": 123
            }

### Retrieve a Comment [GET]
+ Response 200 (application/json)
    + Body

            {
                "date": "2015-01-30T13:05:06Z",
                "message": "My comment message",
                "author": "Jan Kowalski"
            }