FORMAT: 1A

# iris
IRIS API Notes - manage communication during the failure


## ServiceData [/service_data/{service_id}]
+ Parameters
    + service_id (int) ... ID of the service.

### Retrieve information about specific service from Service Catalogue [GET]
+ Response 200 (application/json)
    + Body
        
            {
                "owners": {
                    "technical": ["Jan Kowalski"],
                    "business": ["Tomasz Czarnecki]"
                },
                "jira": {
                    "queue": "MYQUEUE"
                }
            }

# Group Communication

Handles communication related actions

## Communication [/communication/{service_id}]
+ Parameters
    + service_id (int) ... ID of the service.

+ Model (application/json)
    + Body

            {
                "service_id": 123,
                "date": "2015-01-30T13:01:01Z",
                "environment": "prod",
                "status": "trigger",
                "metric": "failingmetric"
            }


### Start new communication [POST]


+ Request

    [Communication][]

+ Response 201 (application/json)
    + Body
    
            {
                "detail": "OK"
            }

### Update current communication [PATCH]
+ Request
    
    [Communication][]

+ Response 200 (application/json)
    + Body

            {
                "detail": "OK"
            }


## Comment [/communication/{service_id}/comment]

New user comment to the communication.

+ Parameters
    + service_id (int) ... ID of the service.

### Add a Comment [POST]
+ Response 201 (application/json)
    + Body

            {
                "detail": "OK"
            }

### Retrieve a Comment [GET]
+ Response 200 (application/json)
    + Body

            {
                "date": "2015-01-30T13:05:06Z",
                "message": "My comment message",
                "author": "Jan Kowalski"
            }